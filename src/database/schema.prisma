generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// auto generate graphql
// generator nestgraphql {
//   provider = "node node_modules/prisma-nestjs-graphql"
//   output = "../@generated/prisma-nestjs-graphql"
//   fields_Validator_from = "class-validator"
//   fields_Validator_input = true
//   decorate_1_type        = "CreateOne*Args"
//   decorate_1_field       = data
//   decorate_1_name        = ValidateNested
//   decorate_1_from        = "class-validator"
//   decorate_1_arguments   = "[]"
//   decorate_2_type        = "CreateOne*Args"
//   decorate_2_field       = data
//   decorate_2_from        = "class-transformer"
//   decorate_2_arguments   = "['() => {propertyType.0}']"
//   decorate_2_name        = Type
// }

model User {
  id                   Int          @id @default(autoincrement())
  userId               String       @unique @default(uuid())
  userName             String       @unique @db.VarChar(50)
  avatarUrl            String?
  email                String       @unique
  accountActivated     Boolean?     @default(false)
  role                 String       @unique
  password             String       @unique
  accessRole           AccessRoles  @relation(fields: [role], references: [roleType])
  movies               Movie[]
  subscriptions        UserSubscriptionPlans[]

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}

model AccessRoles {
  id                   String       @id @default(uuid())
  roleType             String?      @unique @default("User")
  level                Int?         @unique
  description          String?
  users                User[]

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}

model Movie {
  id                   Int          @id @default(autoincrement())
  movieId              String       @unique @default(uuid())
  title                String?      @db.VarChar(200)
  releaseDate          DateTime?
  duration             DateTime?
  synopsis             String?
  posterUrl            String?
  trailerUrl           String
  documentedBy         String       @default(uuid())
  user                 User         @relation(fields: [documentedBy], references: [userId])
  actors               MovieActors[]
  genres               MovieGenres[]

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}


model Actor {
  id                   Int          @unique @id @default(autoincrement())
  actorId              String       @unique @default(uuid())
  firstName            String       @unique @db.VarChar(20)
  lastName             String       @unique @db.VarChar(20)
  dateOfBirth          DateTime     @unique
  movies               MovieActors[]

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}

model MovieActors {
  movie                Movie        @relation(fields: [movieId], references: [movieId])
  movieId              String
  actor                Actor        @relation(fields: [actorId], references: [actorId])
  actorId              String
  @@id([movieId, actorId])

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}

model Genre {
  id                   String       @unique @id @default(uuid())
  genreName            String       @unique
  movies               MovieGenres[]

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}

model MovieGenres {
  movie                Movie        @relation(fields: [movieId], references: [movieId])
  movieId              String
  genre                Genre        @relation(fields: [genreName], references: [genreName])
  genreName            String
  @@id([movieId, genreName])

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}

model Subscriptions {
  id                   Int          @unique @default(autoincrement())
  subscriptionId       String       @unique @id @default(uuid())
  type                 String?
  description          String?
  amount               Int?
  timeDurationAmount   Int?
  timeDurationUnit     String?
  users                UserSubscriptionPlans[]

  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt
}

model UserSubscriptionPlans {
  user                 User           @relation(fields: [userId], references: [userId])
  userId               String
  genre                Subscriptions  @relation(fields: [subscriptionId], references: [subscriptionId])
  subscriptionId       String
  startDate            DateTime?      @default(now()) @db.Timestamptz(6)
  endDate              DateTime?
  subscriptionStatus   SubscriptionStatus[]
  expired              Boolean        @default(false)
  expiredAt            DateTime?
  canceledAt           DateTime?
  suspendedAt          DateTime?
  subscriptionAutoRenewal  Boolean    @default(false)
  @@id([userId, subscriptionId])

  createdAt            DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime       @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  SUSPENDED
}
